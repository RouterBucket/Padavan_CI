name: Build gustavo8000br Kernel-4.4 Padavan

on:
 # push:
 # pull_request:
  workflow_dispatch:
    inputs:
      plugins:
        description: 'json format string of include configs'
        required: true
        default: '{"vpnsvr":"n","vpncli":"n","vpncmd":"n","ss":"n","v2ray":"n","xray":"y","trojan":"n","ssobfs":"n","dnsforwarder":"n","adbyby":"n","adguardhome":"n","smartdns":"n","aliddns":"n","zerotier":"n","ddnsto":"n","wireguard":"n","aldrive":"n","sqm":"y","mentohust":"n","scutclient":"n","njitclient":"n","minieap":"n","dogcom":"n","lang_br":"y"}'
      firmwarever:
        description: 'firmware''s version'
        required: true
        default: '20230225'
      branch_to_build:
        type: choice
        description: 'select a branch from source to build'
        options:
        - main
        - pr-test
        default: 'pr-test'
      fw_type:
        type: choice
        description: 'select a branch from source to build a type of the fw'
        options:
        - main
        - pr-test
        default: 'pr-test'
      uploadwet:
        type: boolean
        description: 'whether to upload firmware to wetransfer'
        default: 'true'
  release:
    types: [published]
env:
  REPOSITORY_URL: https://github.com/gustavo8000br/padavan-4.4.git
  TOOLCHAIN_URL: https://github.com/hanwckf/padavan-toolchain/releases/download/linux-4.4-v1.0/mipsel-linux-uclibc.tar.xz
  WORK_PATH: /opt/padavan-4.4
  TIME_ZONE: America/Sao_Paulo
  FIRMWARE_DATEPREFIX: $(date +"%Y%m%d")
  FIRMWARE_AUTHOR: gustavo8000br
  FIRMWARE_PATH: /opt/firmwares
  FW_TYPE: ${{ github.event.inputs.fw_type }}
jobs:
################### Start Build #################################
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
    strategy:
      matrix:
        include:
         # - build_variant: "mt7620"
         #   targets: "PSG1208 PSG1218 NEWIFI-MINI MI-MINI MI-3 OYE-001 5K-W20"
         # - build_variant: "mt7628"
         #   targets: "HC5861B MI-NANO MZ-R13 MZ-R13P 360P2 HC5761A HC5661A"
         # - build_variant: "mt7621"
         #   targets: "K2P_nano K2P DIR-878 RM2100 CR660x"
         # - build_variant: "mt7621-usb"
         #   targets: "XY-C1 JCG-836PRO JCG-AC860M JCG-Y2 DIR-882 A3004NS MSG1500 WR1200JS MI-R3G NEWIFI3 B70 ZTE-E8820S"
          - build_variant: "mt7621-usb"
            targets: "ZTE-E8820S"
    steps:
    - name: Checkout ⚡️
      uses: actions/checkout@main
    - name: Initialization environment 🚧
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
        fakeroot kmod cpio git python3-docutils gettext automake autopoint \
        texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin
        sudo timedatectl set-timezone "$TIME_ZONE"
    - name: Clone source code ✨
      run: |
        git clone -b ${{ github.event.inputs.branch_to_build }} --depth=1 $REPOSITORY_URL $WORK_PATH
        cd $WORK_PATH/toolchain-mipsel
        mkdir -p toolchain-4.4.x
        wget $TOOLCHAIN_URL
        tar -xf mipsel-linux-uclibc.tar.xz -C toolchain-4.4.x
    - name: Parse json string of include plugins 🚧
      run: |
        echo "vpnsvr=${{fromJson(github.event.inputs.plugins).vpnsvr}}" >> $GITHUB_ENV
        echo "vpncli=${{fromJson(github.event.inputs.plugins).vpncli}}" >> $GITHUB_ENV
        echo "vpncmd=${{fromJson(github.event.inputs.plugins).vpncmd}}" >> $GITHUB_ENV
        echo "ss=${{fromJson(github.event.inputs.plugins).ss}}" >> $GITHUB_ENV
        echo "v2ray=${{fromJson(github.event.inputs.plugins).v2ray}}" >> $GITHUB_ENV
        echo "xray=${{fromJson(github.event.inputs.plugins).xray}}" >> $GITHUB_ENV
        echo "trojan=${{fromJson(github.event.inputs.plugins).trojan}}" >> $GITHUB_ENV
        echo "ssobfs=${{fromJson(github.event.inputs.plugins).ssobfs}}" >> $GITHUB_ENV
        echo "dnsforwarder=${{fromJson(github.event.inputs.plugins).dnsforwarder}}" >> $GITHUB_ENV
        echo "adbyby=${{fromJson(github.event.inputs.plugins).adbyby}}" >> $GITHUB_ENV
        echo "adguardhome=${{fromJson(github.event.inputs.plugins).adguardhome}}" >> $GITHUB_ENV
        echo "smartdns=${{fromJson(github.event.inputs.plugins).smartdns}}" >> $GITHUB_ENV
        echo "aliddns=${{fromJson(github.event.inputs.plugins).aliddns}}" >> $GITHUB_ENV
        echo "zerotier=${{fromJson(github.event.inputs.plugins).zerotier}}" >> $GITHUB_ENV
        echo "ddnsto=${{fromJson(github.event.inputs.plugins).ddnsto}}" >> $GITHUB_ENV
        echo "wireguard=${{fromJson(github.event.inputs.plugins).wireguard}}" >> $GITHUB_ENV
        echo "aldrive=${{fromJson(github.event.inputs.plugins).aldrive}}" >> $GITHUB_ENV
        echo "sqm=${{fromJson(github.event.inputs.plugins).sqm}}" >> $GITHUB_ENV
        echo "mentohust=${{fromJson(github.event.inputs.plugins).mentohust}}" >> $GITHUB_ENV
        echo "scutclient=${{fromJson(github.event.inputs.plugins).scutclient}}" >> $GITHUB_ENV
        echo "njitclient=${{fromJson(github.event.inputs.plugins).njitclient}}" >> $GITHUB_ENV
        echo "minieap=${{fromJson(github.event.inputs.plugins).minieap}}" >> $GITHUB_ENV
        echo "dogcom=${{fromJson(github.event.inputs.plugins).dogcom}}" >> $GITHUB_ENV
        echo "lang_br=${{fromJson(github.event.inputs.plugins).lang_br}}" >> $GITHUB_ENV
    - name: Custom config 🌐
      run: |
        cd $WORK_PATH/trunk
        echo #################### DEBUG #####################################
        echo DEVICE: ${{env.targets}}
        echo #################### DEBUG #####################################
        if [ ! -f configs/templates/${{env.targets}}.config ] ; then
        echo "configs/templates/${{env.targets}}.config not found"
        exit 1
        fi
        cp -f configs/templates/${{env.targets}}.config .config
        ################################################################################################
        # Because different models have different configuration functions,
        # so delete the configuration item first, if you want to add others, 
        # you should also write delete this item, remember! ! !
        ################################################################################################
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER/d' .config # Delete the configuration item SOFTETHERVPN
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT/d' .config # Delete the configuration item SOFTETHERVPN
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD/d' .config # Delete the configuration item SOFTETHERVPN  
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config # Delete the configuration item SS plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config # Delete the configuration item SS server
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config # Delete the configuration item DNSFORWARDER
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config # Delete the configuration item adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config # Delete the configuration item tunsafe
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config # Delete the configuration item Ali DDNS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config # Delete the configuration item srelay
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME/d' .config # Delete the configuration item adguardhome
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ZEROTIER/d' .config # Delete the configuration item zerotier
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DDNSTO/d' .config # Delete the configuration item ddnsto
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WIREGUARD/d' .config # Delete the configuration item wireguard
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALDRIVER/d' .config # Delete the configuration item Alibaba Cloud Disk
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config # Delete the configuration item smartdns
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SQM/d' .config # Delete the configuration item sqm
        # Campus network related start
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config # Delete configuration item MENTOHUST
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config # Delete the configuration item SCUTCLIENT
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIEAP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DOGCOM/d' .config
        # Campus network related end
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ######################################################################
        # The following options are to define the functions you need (y=integrate, n=ignore), rewrite to the .config file
        ######################################################################
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER=${{env.vpnsvr}}" >> .config #SOFTETHERVPN
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT=${{env.vpncli}}" >> .config #SOFTETHERVPN
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD=${{env.vpncmd}}" >> .config #SOFTETHERVPN
        # science related
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=${{env.ss}}" >> .config #SS plus+
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=${{env.v2ray}}" >> .config # Integrated v2ray execution file (about 3.8M)
        echo "CONFIG_FIRMWARE_INCLUDE_XRAY=${{env.xray}}" >> .config # Integrated xray execution file (about 5.6M), can replace v2ray, note: if the flash memory is too small, it is recommended to use v2ray
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=${{env.trojan}}" >> .config # Integrate trojan execution file (about 1.1M)
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=${{env.ssobfs}}" >> .config # simple-obfs obfuscation plugin
        echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=n" >> .config #SS server
        #
        echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config # Can not be integrated
        echo "CONFIG_FIRMWARE_INCLUDE_TUNSAFE=n" >> .config # tunsafe
        echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=${{env.dnsforwarder}}" >> .config # dnsforwarder
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=${{env.adbyby}}" >> .config # adbyby plus+
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=${{env.adguardhome}}" >> .config # adguardhome
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=${{env.smartdns}}" >> .config # smartdns
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=${{env.aliddns}}" >> .config # Ali DDNS
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=${{env.zerotier}}" >> .config # zerotier ~1.3M
        echo "CONFIG_FIRMWARE_INCLUDE_DDNSTO=${{env.ddnsto}}" >> .config # ddnsto
        echo "CONFIG_FIRMWARE_INCLUDE_WIREGUARD=${{env.wireguard}}" >> .config # wireguard
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ALDRIVER=${{env.aldrive}}" >> .config # Alibaba cloud disk
        echo "CONFIG_FIRMWARE_INCLUDE_SQM=${{env.sqm}}" >> .config # SQM
        #
        # Campus network related start
        echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=${{env.mentohust}}" >> .config # MENTOHUST
        echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=${{env.scutclient}}" >> .config # SCUTCLIENT
        echo "CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT=${{env.njitclient}}" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_MINIEAP=${{env.minieap}}" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_DOGCOM=${{env.dogcom}}" >> .config
        # Campus network related end
        #########################################################################################
        # For custom adding other functions,
        # please refer to the config file in the source code configs/templates/ directory.
        # Just add it in the above format
        # 
        # The format is as follows:
        #sed -i '/customization/d' .config
        #echo "customization=y" >> .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_LANG_BR/d' .config
        echo "CONFIG_FIRMWARE_INCLUDE_LANG_BR=${{env.lang_br}}" >> .config
        sed -i "s/FIRMWARE_BUILDS_REV=.*/FIRMWARE_BUILDS_REV=${{ github.event.inputs.firmwarever }}/g" ./versions.inc
        sed -i "s/FIRMWARE_BUILDS_TYPE=.*/FIRMWARE_BUILDS_TYPE=${{ github.event.inputs.fw_type }}/g" ./versions.inc
        echo 'Update version number time'
        #########################################################################################
    - name: Build firmware 🦺
      run: |
        cd $WORK_PATH/trunk
        mkdir -p $FIRMWARE_PATH
        sudo ./clear_tree
        for m in $targets; do sudo ./build_firmware_modify $m; \
          if [ $? = 0 ]; then cp -f images/*.trx $FIRMWARE_PATH/$m.trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done
        echo "FIRMWARE_DATEPREFIX=$(date +"%Y%m%d")" >> $GITHUB_ENV
        echo "FIRMWARE_TYPE=${{ github.event.inputs.fw_type }}" >> $GITHUB_ENV
################## End Build ######################################
################## Upload #########################################
    - name: Create archive
      if: ${{ github.event_name != 'release' && success() }}
      run: |
          ls -lh $FIRMWARE_PATH
          GIT_VERSION=`git rev-parse --short=7 HEAD 2>/dev/null` && [ -n "$GIT_VERSION" ] && \
          image_name=images_${build_variant}_${GIT_VERSION} || image_name=images_${build_variant}
          cd $FIRMWARE_PATH; md5sum *.trx |tee md5sum.txt; 7z a -mx=9 ${image_name}.7z ./*
          echo "image_name=${image_name}" >> $GITHUB_ENV
    - uses: actions/checkout@v2
      # This step reads a file from repo and use it for body of the release
      # This works on any self-hosted runner OS
    - name: Read release.md and use it as a body of new release
      id: read_release
      shell: bash
      run: |
          r=$(cat $WORK_PATH/release.md)                       # <--- Read release.md (Provide correct path as per your repo)
          r="${r//'%'/'%25'}"                               # Multiline escape sequences for %
          r="${r//$'\n'/'%0A'}"                             # Multiline escape sequences for '\n'
          r="${r//$'\r'/'%0D'}"                             # Multiline escape sequences for '\r'
          echo "::set-output name=RELEASE_BODY::$r"         # <--- Set environment variable
    - name: Upload images to Artifact
      if: ${{ github.event_name != 'release' && success() }}
      uses: actions/upload-artifact@v3.1.1
      with:
          name: ${{ env.image_name }}
          path: ${{ env.FIRMWARE_PATH }}/*.7z
    - name: Upload images to Releases
      if: ${{ github.event_name == 'release' && success() }}
      uses: svenstaro/upload-release-action@2.3.0
      with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.FIRMWARE_PATH }}/*.trx
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: true
          file_glob: true
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}
###########################################
    - name: Organize firmware files 🚚📦️
      id: organize-types
      run: |
        cd $WORK_PATH/trunk/images
        for firmwarefile in $(ls *.trx)
        do sudo mv $firmwarefile $FIRMWARE_PATH/${FIRMWARE_TYPE}"_"${FIRMWARE_DATEPREFIX}"_"${FIRMWARE_AUTHOR}"_"${{env.targets}}"_kernel-4.4.trx"
        done
        cd $FIRMWARE_PATH
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "STATUS=success" >> $GITHUB_ENV
    - name : Upload packages ✅
      uses: actions/upload-artifact@main
      if: env.STATUS == 'success'
      with:
        name: Padavan44-packages
        path: ${{ env.FIRMWARE }}
    - name: Upload firmware to WeTransfer ✅
      if: env.STATUS == 'success' && github.event.inputs.uploadwet == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep -o -E "https?://[a-zA-Z0-9\.\/_&=@$%?~#-]*")"
        echo "WETRANSFER_URL=$(cat wetransfer.log | grep -o -E "https?://[a-zA-Z0-9\.\/_&=@$%?~#-]*")" >> $GITHUB_ENV
################################ End Upload ###############################
    - name: Remove obsolete firmwares on artifacts 🔥
      uses: c-hive/gha-remove-artifacts@v1.3.0
      if: env.STATUS == 'success'
      with:
        age: '1 day'
        skip-recent: 5
